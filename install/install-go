#!/bin/bash
set -e

# Installs the latest release of Go from https://go.dev/dl to ~/.local without
# requiring root access.
#
# Note that the downloaded tar file is not removed and can be found in either
# ~/Downloads or /tmp.

declare REPO=go.dev/dl
declare NAME=go
declare TARGETDIR="$HOME/.local"
declare OS ARCH
declare TEMPDIR

die() {
	echo "$@" >&2
	exit 1
}

init_os() {
	OS=$(uname -s)
	case $OS in
	Linux*) OS=linux ;;
	Darwin*) OS=darwin ;;
	MINGW* | MSYS*) OS=windows ;;
	esac
}

init_arch() {
	ARCH=$(uname -m)
	case $ARCH in
	aarch64) ARCH=arm64 ;;
	arm64) ARCH="arm64" ;;
	x86_64) ARCH=amd64 ;;
	esac
}

check_sha() {
	local expected_sha actual_sha
	expected_sha=$(curl -sSL "https://$REPO/?mode=json" |
		jq -r '.[0].files[]
			| select(.os == "'"$OS"'")
			| select(.arch == "'"$ARCH"'")
			| select(.filename | endswith(".tar.gz"))
			| .sha256') ||
		die "unable to fetch SHA hash"
	actual_sha=$(shasum -a 256 "$1" | awk '{print $1}')
	if [[ "$expected_sha" != "$actual_sha" ]]; then
		echo "SHA checksum verification failed" >&2
		echo "expected: $expected_sha" >&2
		echo "actual: $actual_sha" >&2
		return 1
	fi
}

download() {
	local url path
	url="https://$REPO/$(curl -sSL "https://$REPO/?mode=json" |
		jq -r '.[0].files[]
			| select(.os == "'"$OS"'")
			| select(.arch == "'"$ARCH"'")
			| select(.filename | endswith(".tar.gz"))
			| .filename')" ||
		die "unable to fetch donwload URL"
	path="$([[ -d $HOME/Downloads ]] && echo "$HOME/Downloads" || echo /tmp)/${url##*/}"
	curl -L "$url" -o "$path"
	check_sha "$path"
	tar -xf "$path" -C "$TEMPDIR"
	echo "downloaded tarball to $path" >&2
}

install() {
	local dir
	dir=$(find "$TEMPDIR" -type d -name "$NAME" -print -quit)
	mv "$dir" "$TARGETDIR"
	echo "installed $NAME to $TARGETDIR" >&2
}

TEMPDIR=$(mktemp -d)
trap 'rm -rf -- "$TEMPDIR"' EXIT

init_os
init_arch
download

mkdir -p "$TARGETDIR"
rm -rf "${TARGETDIR:?}/$NAME"
install
