#!/bin/bash -
set -o nounset

# Installs the latest nightly build of zig from https://ziglang.org/download to
# ~/.local without requiring root access.
#
# Note that the downloaded tar file is not removed and can be found in either
# ~/Downloads or /tmp.

declare REPO=ziglang.org/download
declare NAME=zig
declare TARGETDIR="$HOME/.local"
declare OS ARCH
declare TEMPDIR

die() {
	echo "$@" >&2
	exit 1
}

determine_os() {
	OS=$(uname -s)
	case $OS in
		Linux*) OS=linux ;;
		Darwin*) OS=macos ;;
		MINGW* | MSYS*) OS=windows ;;
		*) die "Unsupported OS: $OS" ;;
	esac
}

determine_arch() {
	ARCH=$(uname -m)
	case $ARCH in
		aarch64) ARCH=aarch64 ;;
		arm64) ARCH="aarch64" ;;
		x86_64) ARCH=x86_64 ;;
		*) die "Unsupported architecture: $ARCH" ;;
	esac
}

verify_checksum() {
	local expected_checksum actual_checksum
	expected_checksum=$(curl -sSL "https://$REPO/index.json" |
		jq -r --arg arch "$ARCH" --arg os "$OS" '.master[$arch + "-" + $os].shasum') ||
		die "Unable to fetch checksum"
	actual_checksum=$(sha256sum "$1" | cut -d ' ' -f 1)
	[[ $expected_checksum == "$actual_checksum" ]] ||
		die "Checksum verification failed: expected $expected_checksum, got $actual_checksum"
}

download() {
	local url path
	url=$(curl -sSL "https://$REPO/index.json" |
		jq -r --arg arch "$ARCH" --arg os "$OS" '.master[$arch + "-" + $os].tarball') ||
		die "Unable to fetch download URL"
	echo "$url"
	path="$([[ -d $HOME/Downloads ]] && echo "$HOME/Downloads" || echo /tmp)/${url##*/}"
	echo "$path"
	curl -L "$url" -o "$path"
	verify_checksum "$path"
	tar -xf "$path" -C "$TEMPDIR"
	echo "Downloaded tarball to $path" >&2
}

install() {
	local dir
	dir=$(find "$TEMPDIR" -mindepth 1 -maxdepth 1 -type d -print -quit)
	mv "$dir" "$TARGETDIR/$NAME"
	echo "Installed $NAME to $TARGETDIR" >&2
}

TEMPDIR=$(mktemp -d)
trap 'rm -rf -- "$TEMPDIR"' EXIT

determine_os
determine_arch
download

mkdir -p "$TARGETDIR"
rm -rf "${TARGETDIR:?}/$NAME"
install
